#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void heapify(int arr[], int n, int i) 
{ 
    int largest = i; // Initialize largest as root 
    int l = 2*i + 1; // left = 2*i + 1 
    int r = 2*i + 2; // right = 2*i + 2 
  
    // If left child is larger than root 
    if (l < n && arr[l] > arr[largest]) 
        largest = l; 
  
    // If right child is larger than largest so far 
    if (r < n && arr[r] > arr[largest]) 
        largest = r; 
  
    // If largest is not root 
    if (largest != i) 
    { 
        int temp  = arr[largest];
            arr[largest] = arr[i];
            arr[i] = temp;
  
        // Recursively heapify the affected sub-tree 
        heapify(arr, n, largest); 
    } 
} 
  
// main function to do heap sort 
void heapSort(int arr[], int n) 
{ 
    // Build heap (rearrange array) 
    for (int i = n / 2 - 1; i >= 0; i--) 
        heapify(arr, n, i); 
  
    // One by one extract an element from heap 
    for (int i=n-1; i>=0; i--) 
    { 
        // Move current root to end 
        int temp = arr[i];
            arr[i] = arr[0];
            arr[0] = temp;
  
        // call max heapify on the reduced heap 
        heapify(arr, i, 0); 
    } 
} 
int main() {
     int arr[50];
     int n;
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    heapSort(arr,n);
    int Q1,Q2,Q3;
    if(n%2 == 0){
         Q2 = (arr[n/2-1] + arr[n/2])/2;
        int lh = n/2;
            if(lh%2 == 0){
                Q1 = (arr[lh/2-1] + arr[lh/2])/2;
                Q3 = (arr[lh+(lh/2-1)] + arr[lh+(lh/2)])/2; 
            }
            else{
                Q1 = arr[lh/2];
                Q3 = arr[lh+lh/2];
            }
    }
    else{
        Q2 = arr[n/2];
        int lh = n/2;
        Q1 = (arr[lh/2-1] + arr[lh/2])/2;
        Q3 = (arr[lh+(lh/2)] + arr[lh+(lh/2+1)])/2;
    }
    printf("%d\n",Q1);
    printf("%d\n",Q2);
    printf("%d",Q3);
    return 0;
}
